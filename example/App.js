/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component} from 'react';
import {StyleSheet, Text, View, Button, NativeEventEmitter} from 'react-native';
// idk why, but metro needs the full path here
import {SSHClient} from '@ridenui/react-native-riden-ssh-test/build/dist/index';
import {SSH_HOST, SSH_USER, SSH_PORT, SSH_PASSWORD} from '@env';
import MessageQueue from 'react-native/Libraries/BatchedBridge/MessageQueue.js';
// import BatchedBridge from 'react-native/Libraries/BatchedBridge/BatchedBridge.js';
// import RCTDeviceEventEmitter from 'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js';

const startState = {
    status: 'starting',
    uptime: '--',
    exitCode: '--',
    running: false,
    php: '--',
    node: '--',
    executionTime: '--',
    cancelOutput: '--',
    streamOutput: ['--'],
};

export default class App extends Component<{}> {
    cancel = async () => {};

    state = {
        ...startState,
    };

    client = new SSHClient(
        {
            username: SSH_USER,
            host: SSH_HOST,
            port: parseInt(SSH_PORT ?? '22', 10),
            password: SSH_PASSWORD,
        },
        NativeEventEmitter,
    );

    retry() {
        this.test();
    }

    disconnect() {
        this.client.disconnect();
    }

    async test() {
        if (this.state.running) return;
        this.setState({
            ...startState,
            running: true,
        });
        if (this.cancel) {
            await this.cancel();
        }
        const start = new Date();
        this.client
            .execute('uptime')
            .then(response => {
                console.log(response);
                this.setState({
                    ...this.state,
                    status: 'native callback received',
                    uptime: response.stdout.join('\n'),
                });
                return this.client.execute(
                    'echo "Normal stdout" && echo "Test stderr" >&2 && exit 42',
                );
            })
            .then(response => {
                console.log(response);
                this.setState({
                    ...this.state,
                    status: 'native callback received no.2',
                    exitCode: response.code,
                });
                // Test parallel execution
                return Promise.all([
                    this.client.execute('php --version'),
                    this.client.execute('node --version'),
                ]);
            })
            .then(responses => {
                const [php, node] = responses;
                console.log({php, node});
                this.setState({
                    ...this.state,
                    status: 'native callback received no.3 & no.4',
                    php: php.stdout.join('\n'),
                    node: node.stdout.join('\n'),
                    running: false,
                    executionTime: new Date() - start,
                });

                MessageQueue.spy((spyData: SpyData) => {
                    if (
                        spyData.module === 'RCTDeviceEventEmitter' ||
                        spyData.module === 'SSH'
                    ) {
                        console.log({spyData});
                    }
                });

                return this.client.execute(
                    'while [ 1 ]; do echo "Hello"; sleep 1; done',
                    true,
                );
            })
            .then(([promise, cancel]) => {
                setTimeout(async () => {
                    await cancel();
                    console.log('cancelled');
                }, 4000);

                return promise;
            })
            .then(response => {
                this.setState({
                    ...this.state,
                    status: 'native callback received no.5',
                    cancelOutput: response.stdout.join('\n'),
                });
            })
            .then(() => {
                return this.client.executeStream(
                    'while [ 1 ]; do echo "Hello"; sleep 1; done',
                    true,
                );
            })
            .then(async ([eventEmitter, cancel, resultPromise]) => {
                this.cancel = cancel;

                const stdoutHandler = line => {
                    this.setState({
                        ...this.state,
                        streamOutput: [
                            ...this.state.streamOutput.filter(v => v !== '--'),
                            line,
                        ],
                    });
                };
                eventEmitter.addListener('onNewStdoutLine', stdoutHandler);

                setTimeout(() => {
                    console.log('CANCEL THIS DIP SHIT');
                    cancel().then(() => {
                        console.log('Cancelled successfully');
                    });
                }, 10000);

                const {code} = await resultPromise;

                eventEmitter.removeListener('onNewStdoutLine', stdoutHandler);

                console.log({code});
            })
            .catch(e => {
                console.error('gesamt error: ', e);
            });
    }

    componentDidMount() {
        this.test();
    }

    render() {
        return (
            <View style={styles.container}>
                <Text style={styles.welcome}>
                    ☆ReactNativeRidenSsh example☆
                </Text>
                <Text style={styles.instructions}>
                    STATUS: {this.state.status}
                </Text>
                <Text style={styles.welcome}>☆NATIVE CALLBACK MESSAGE☆</Text>
                <Text style={styles.instructions}>{this.state.uptime}</Text>
                <Text style={styles.instructions}>
                    ExitCode no.2: {this.state.exitCode}
                </Text>
                <Text style={styles.instructions}>PHP: {this.state.php}</Text>
                <Text style={styles.instructions}>Node: {this.state.node}</Text>
                <Text style={styles.instructions}>
                    Exec Time: {this.state.executionTime}
                </Text>
                <Text style={styles.instructions}>
                    Cancel output: {this.state.cancelOutput}
                </Text>
                <Text style={styles.instructions}>
                    StreamOutput: {this.state.streamOutput.join('\n')}
                </Text>
                <Button
                    onPress={() => this.retry()}
                    title="Rerun"
                    color="#841584"
                    accessibilityLabel="Rerun"
                    disabled={this.state.running}
                />
                <Button
                    onPress={() => this.disconnect()}
                    title="Disconnect"
                    color="#841584"
                    accessibilityLabel="Disconnect"
                />
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    welcome: {
        fontSize: 20,
        textAlign: 'center',
        margin: 10,
    },
    instructions: {
        textAlign: 'center',
        color: '#333333',
        marginBottom: 5,
    },
});
